
###
### Custom bash functions
###

## extract files
ex () {
   if [ -f $1 ] ; then
     case $1 in
       *.tar.bz2)     tar xjfv $1                ;;
       *.tar.gz)      tar xzfv $1                ;;
       *.bz2)         bunzip2 $1                ;;
       *.rar)         rar x $1                  ;;
       *.gz)          gunzip $1                 ;;
       *.tar)         tar xfv $1                 ;;
       *.tbz2)        tar xjfv $1                ;;
       *.tgz)         tar xzfv $1                ;;
       *.zip)         7z x $1                  ;;
       *.Z)           uncompress $1             ;;
       *)             echo "'$1' cannot be extracted via extract()" ;;
     esac
  else
    echo "'$1' is not a valid file"
  fi
}


##
## aurbuild
##
aurbuild() {
           cd ~/build/sources
           packagename=$1
           ## wget https://aur.archlinux.org/packages/${packagename:0:2}/$1/$1.tar.gz || return 1
           ## https://aur.archlinux.org/cgit/aur.git/snapshot/r-mkl.tar.gz
           curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/$1.tar.gz || return 1
           echo "Got package..."
           ex $1.tar.gz || return 1
           rm $1.tar.gz || return 1
           cd $1
           makepkg -s || return 1    
}

# edit file with root privs
function E() {
         emacsclient -c -a emacs "/sudo:root@localhost:$1"
}  

yapgc () {
      	yaourt -Syua
	if yaourt -Qtdq
	then
		echo ":: Unused packages found ..."
	        yaourt -Rs $(yaourt -Qtdq)
	else
		echo ":: No unused packages ..."
	fi
}

xxnpExact () {
          R --vanilla CMD build npExact
          R --vanilla CMD check npExact_0.2.tar.gz
          rm npExact.pdf
          R --vanilla CMD Rd2pdf npExact &> /dev/null
}

xxgenBinom () {
           R --vanilla CMD build genBinomTest
           R --vanilla CMD check genBinomTest_0.1.tar.gz
           rm genBinomTest.pdf
           R --vanilla CMD Rd2pdf genBinomTest &> /dev/null
}

xxelm () {
      R --vanilla CMD build elm
      R --vanilla CMD check elm_0.1.tar.gz
      rm elm.pdf
      R --vanilla CMD Rd2pdf elm &> /dev/null
}

xxeurostat () {
           rm eurostat/vignettes/figure/*
           rmdir eurostat/vignettes/figure
           R --vanilla CMD build eurostat
           R --vanilla CMD check eurostat_1*.tar.gz
}

##
## R benchmarks
##
timeR () {
      R CMD BATCH Rbenchmarks.R $1
      sed '/^> / d' -i $1
      sed '/^+ / d' -i $1
}

##
## WIIW stuff
## 
connectWIIW () {
            cd /home/reitero/Downloads/reiter-vpn/
            sudo openvpn --config reiter.ovpn
}
 
mountPUBLIC () {
            sudo mount -t cifs //172.16.0.3/W/Reiter/PUBLIC/ /home/reitero/Arbeit/wiiw/PUBLIC -o username=reiter,file_mode=0777,dir_mode=0777
}

mountW () {
       sudo mount -t cifs //172.16.0.3/W/ /home/reitero/Arbeit/wiiw/W -o username=reiter,file_mode=0777,dir_mode=0777
}

mountP () {
       sudo mount -t cifs //172.16.0.3/P/Reiter/Projects_Backup /home/reitero/Arbeit/wiiw/Projects_Backup -o username=reiter,file_mode=0777,dir_mode=0777
       sudo mount -t cifs //172.16.0.3/P/Reiter/Data_Backup /home/reitero/Arbeit/wiiw/Data_Backup -o username=reiter,file_mode=0777,dir_mode=0777
}

unmountP () {
       sudo umount /home/reitero/Arbeit/wiiw/Projects_Backup
       sudo umount /home/reitero/Arbeit/wiiw/Data_Backup
}

mountWIIWFolders () {
                 mountProjects
                 mountRawData
                 mountPUBLIC
}

unmountWIIWFolders () {
                   sudo umount /home/reitero/Arbeit/wiiw/backup_Projects
                   sudo umount /home/reitero/Arbeit/wiiw/backup_RawData
                   sudo umount /home/reitero/Arbeit/wiiw/PUBLIC
}

remWIIW () {
        rdesktop -g 96% -P -z -x l -r sound:off -d WIIW -u reiter -p wior_2 172.16.5.1
}

remWIIWfixed () {
             rdesktop -g 1500x850 -P -z -x l -r sound:off -d WIIW -u reiter -p wior_2 172.16.5.1
}

##
## UniVie Stuff
##

## Bonnie
mountBonnie () {
            sshfs a0603045@bonnie.par.univie.ac.at:/home/a0603045 /home/reitero/Arbeit/Uni/2015W/pap/bonnie
}

sshBonnie () {
          ssh 'a0603045@bonnie.par.univie.ac.at'
}

## Cora
mountCora () {
          sshfs a0603045@cora.par.univie.ac.at:/home/a0603045 /home/reitero/Arbeit/Uni/2016S/hpc/cora
}

sshCora () {
        ssh 'a0603045@cora.par.univie.ac.at'
}

## Lewis Server. 4f3}lewis
sshLewis () {
          ssh 'a0603045@lewis.cs.univie.ac.at'
}

mountLewis () {
            sshfs a0603045@lewis.cs.univie.ac.at:/home/a0603045/models/ /home/reitero/Arbeit/Uni/2017W/Praktikum1/Lewis
}

rsyncLewis () {
           cd /home/reitero/Arbeit/Uni/2017W/Praktikum1/
           rsync -vz Models/Circles/*.R Lewis/circles
           rsync -vz Models/Circles/*.sh Lewis/circles
           rsync -rvz Models/Circles/FLAME_parallel/*.c Lewis/circles/FLAME_parallel
           rsync -rvz Models/Circles/FLAME_serial/*.c Lewis/circles/FLAME_serial
           cd -
}

rsyncResults () {
           cd /home/reitero/Arbeit/Uni/2017W/Praktikum1/
           rsync -rvz Lewis/circles/Results/ Models/Circles/Results 
           cd -
}
